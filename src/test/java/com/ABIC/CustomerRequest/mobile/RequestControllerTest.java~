package com.ABIC.CustomerRequest.mobile;

import com.ABIC.CustomerRequest.exception.BusinessException;
import com.ABIC.CustomerRequest.exception.ResourceNotFoundException;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.controller.RequestController;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.Request;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.RequestWrapper;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.ValidateRequest;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.dto.AddRequestDTO;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.dto.RequestResponseDTO;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.service.RequestService;
import com.ABIC.CustomerRequest.util.PaginatedResponse;
import com.ABIC.CustomerRequest.util.Response;
import com.ABIC.CustomerRequest.web.serviceManagment.model.ServiceType;
import com.ABIC.CustomerRequest.web.serviceManagment.model.Services;
import com.ABIC.CustomerRequest.web.serviceManagment.model.dto.TemplateFieldDTO;
import com.ABIC.CustomerRequest.web.serviceManagment.model.dto.TemplateSubmissionDTO;
import com.ABIC.CustomerRequest.web.serviceManagment.service.ServiceManagementService;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.data.domain.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RequestControllerTest {

    @Mock
    private ServiceManagementService serviceManagementService;

    @Mock
    private RequestService requestService;

    @InjectMocks
    private RequestController requestController;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllRequestsWithoutStatus() {
        Page<RequestResponseDTO> mockPage = new PageImpl<>(List.of(new RequestResponseDTO()));
        when(requestService.getAllRequests(eq("1234"), any(Pageable.class)))
                .thenReturn(mockPage);

        ResponseEntity<Response<PaginatedResponse<RequestResponseDTO>>> response = requestController.getAllRequests(
                "session","client","34","service", "1234", null, 0, 10);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertFalse(response.getBody().getData().getContent().isEmpty());
    }

    @Test
    void testGetAllRequestsWithStatus() {
        Request.Status status = Request.Status.PENDING;
        Page<RequestResponseDTO> mockPage = new PageImpl<>(List.of(new RequestResponseDTO()));
        when(requestService.findByStatusAndCustomerNumber(eq(status), eq("user"), any(Pageable.class)))
                .thenReturn(mockPage);

        ResponseEntity<Response<PaginatedResponse<RequestResponseDTO>>> response = requestController.getAllRequests(
                "session", "1234","34","id", "user",status, 0, 10);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertFalse(response.getBody().getData().getContent().isEmpty());
    }

    @Test
    void testCreateRequestWithValidChannel() {
        RequestWrapper wrapper = getSampleRequestWrapper("34");

        when(requestService.saveRequest(any(), any(), any(), any()))
                .thenReturn(new Request());

        ResponseEntity<Response<String>> response = requestController.createRequest(wrapper);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Request created successfully", response.getBody().getData());
    }


    @Test
    void testCreateRequestWithInvalidChannel() {
        RequestWrapper wrapper = getSampleRequestWrapper("99");

        // When creating a request with an invalid channel ID, a BusinessException should be thrown
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            requestController.createRequest(wrapper);
        });

        // Verify the exception message
        assertEquals("Invalid Channel-Id: 99", exception.getMessage());
    }


    @Test
    void testGetServiceTypes() {
        List<ServiceType> types = List.of(new ServiceType());
        when(requestService.getAllServiceTypes()).thenReturn(types);

        ResponseEntity<Response<List<ServiceType>>> response = requestController.getServiceTypes();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(types, response.getBody().getData());
    }

    @Test
    void testGetAllServices() {
        Page<Services> mockPage = new PageImpl<>(List.of(new Services()));
        when(serviceManagementService.getServicesByStatus(eq("Active"), any(Pageable.class)))
                .thenReturn(mockPage);

        ResponseEntity<Response<PaginatedResponse<Services>>> response = requestController.getAllServices(0, 10);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertFalse(response.getBody().getData().getContent().isEmpty());
    }

    @Test
    void testSubmitForm() {
        TemplateSubmissionDTO dto = new TemplateSubmissionDTO();
        when(requestService.submitTemplateForm(dto,"TRS052029221407438700594511285f","1234")).thenReturn("SUB123");

        ResponseEntity<Response<String>> response = requestController.submitForm(dto,"TRS052029221407438700594511285f");

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody().getData().contains("SUB123"));
    }

    @Test
    void testValidationAnnotationsOnAddRequestDTO() {
        // This test verifies that the AddRequestDTO class has the expected validation annotations

        // Get the class
        Class<AddRequestDTO> clazz = AddRequestDTO.class;

        // Check for @NotBlank on description field
        try {
            java.lang.reflect.Field descriptionField = clazz.getDeclaredField("description");
            NotBlank notBlankAnnotation = descriptionField.getAnnotation(jakarta.validation.constraints.NotBlank.class);
            assertNotNull(notBlankAnnotation, "description field should have @NotBlank annotation");
            assertEquals("Description cannot be empty", notBlankAnnotation.message());
        } catch (NoSuchFieldException e) {
            fail("description field not found in AddRequestDTO");
        }

        // Check for @NotNull on serviceId field
        try {
            java.lang.reflect.Field serviceIdField = clazz.getDeclaredField("serviceId");
            NotNull notNullAnnotation = serviceIdField.getAnnotation(jakarta.validation.constraints.NotNull.class);
            assertNotNull(notNullAnnotation, "serviceId field should have @NotNull annotation");
            assertEquals("Service ID cannot be null", notNullAnnotation.message());
        } catch (NoSuchFieldException e) {
            fail("serviceId field not found in AddRequestDTO");
        }

        // Check for @NotBlank on customerNumber field
        try {
            java.lang.reflect.Field customerNumberField = clazz.getDeclaredField("customerNumber");
            NotBlank notBlankAnnotation = customerNumberField.getAnnotation(jakarta.validation.constraints.NotBlank.class);
            assertNotNull(notBlankAnnotation, "customerNumber field should have @NotBlank annotation");
            assertEquals("Customer Number cannot be empty", notBlankAnnotation.message());
        } catch (NoSuchFieldException e) {
            fail("customerNumber field not found in AddRequestDTO");
        }

        // Check for @NotBlank on requestedBy field
        try {
            java.lang.reflect.Field requestedByField = clazz.getDeclaredField("requestedBy");
            NotBlank notBlankAnnotation = requestedByField.getAnnotation(jakarta.validation.constraints.NotBlank.class);
            assertNotNull(notBlankAnnotation, "requestedBy field should have @NotBlank annotation");
            assertEquals("Requested by cannot be empty", notBlankAnnotation.message());
        } catch (NoSuchFieldException e) {
            fail("requestedBy field not found in AddRequestDTO");
        }
    }

    @Test
    void testResourceNotFoundExceptionHandling() {
        RequestWrapper wrapper = getSampleRequestWrapper("34");

        when(requestService.saveRequest(any(), any(), any(), any()))
                .thenThrow(new ResourceNotFoundException("Service", "id", 999L));

        assertThrows(ResourceNotFoundException.class, () -> {
            requestController.createRequest(wrapper);
        });
    }

    @Test
    void testBusinessExceptionHandling() {
        RequestWrapper wrapper = getSampleRequestWrapper("34");

        when(requestService.saveRequest(any(), any(), any(), any()))
                .thenThrow(new BusinessException("Business rule violated"));

        assertThrows(BusinessException.class, () -> {
            requestController.createRequest(wrapper);
        });
    }

    @Test
    void testGetTemplateFieldsByGroupIdWithEmptyGroupId() {
        // When group ID is empty, a BusinessException should be thrown
        assertThrows(BusinessException.class, () -> {
            requestController.getTemplateFieldsByGroupId("");
        });
    }

    @Test
    void testGetTemplateFieldsByGroupId() {
        // Arrange
        String groupId = "test-group-id";
        List<TemplateFieldDTO> mockTemplateFields = List.of(
            new TemplateFieldDTO(
                1L, 
                "Test Field EN", 
                "Test Field AR", 
                "text", 
                true, 
                false, 
                1, 
                "Placeholder EN", 
                "Placeholder AR", 
                List.of("Option 1", "Option 2"), 
                List.of("خيار 1", "خيار 2")
            )
        );

        when(serviceManagementService.getTemplateFieldsByGroupId(groupId)).thenReturn(mockTemplateFields);

        // Act
        ResponseEntity<Response<List<TemplateFieldDTO>>> response = requestController.getTemplateFieldsByGroupId(groupId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertNotNull(response.getBody().getData());
        assertFalse(response.getBody().getData().isEmpty());
        assertEquals(mockTemplateFields, response.getBody().getData());
    }

    private RequestWrapper getSampleRequestWrapper(String channelId) {
        AddRequestDTO addRequestDTO = new AddRequestDTO(
                "الرجاء حذف المحفظة",
                5L,
                "1234",
                "someone"
        );

        ValidateRequest validateRequest = new ValidateRequest(
                "TRS052029221407438700594511285f",
                "cv123",
                "152",
                "109491",
                channelId
        );

        RequestWrapper wrapper = new RequestWrapper();
        wrapper.setAddRequestDTO(addRequestDTO);
        wrapper.setValidateRequest(validateRequest);
        return wrapper;
    }
}
