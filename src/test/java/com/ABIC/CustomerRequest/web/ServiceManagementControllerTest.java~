package com.ABIC.CustomerRequest.web;

import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.Request;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.RequestStatusSummary;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.StatusUpdateRequest;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.model.dto.UpdateRequestDTO;
import com.ABIC.CustomerRequest.mobile.requestManagmentService.service.RequestService;
import com.ABIC.CustomerRequest.util.Response;
import com.ABIC.CustomerRequest.web.config.JWTFilter;
import com.ABIC.CustomerRequest.web.config.SecurityConfig;
import com.ABIC.CustomerRequest.web.serviceManagment.controller.ServiceManagementController;
import com.ABIC.CustomerRequest.web.serviceManagment.model.*;
import com.ABIC.CustomerRequest.web.serviceManagment.model.dto.ServiceDTO;
import com.ABIC.CustomerRequest.web.serviceManagment.service.ServiceManagementService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.FilterType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(controllers = ServiceManagementController.class,
        excludeFilters = {
                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = {
                        JWTFilter.class,
                        SecurityConfig.class
                })
        })
@AutoConfigureMockMvc(addFilters = false)

public class ServiceManagementControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ServiceManagementService serviceManagementService;

    @MockBean
    private ServiceManagementController serviceManagementController;

    @MockBean
    private RequestService requestService;


    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testAddService() throws Exception {
        ServiceDTO serviceDTO = new ServiceDTO();
        serviceDTO.setEnglishName("Test Service");
        serviceDTO.setArabicName("خدمة تجريبية");
        serviceDTO.setDescription("Service Description");
        serviceDTO.setArabicDescription("وصف الخدمة");
        serviceDTO.setSlaTime(5);
        serviceDTO.setStatusId(1L);
        serviceDTO.setServiceTypeId(1L);

        mockMvc.perform(post("/api/services/add-service")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(serviceDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("success"))
                .andExpect(jsonPath("$.statusCode").value(200))
                .andExpect(jsonPath("$.data").value("Service added successfully"));
    }

    @Test
    void testGetRequestByNumberFound() {
        Request request = new Request();
        when(requestService.getRequestByNumber("REQ-100000")).thenReturn(Optional.of(request));

        ResponseEntity<Response<Request>> response = serviceManagementController.getRequestByNumber("REQ-100000");

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(request, response.getBody().getData());
    }

    @Test
    void testGetRequestByNumberNotFound() {
        when(requestService.getRequestByNumber("REQ-000")).thenReturn(Optional.empty());

        ResponseEntity<Response<Request>> response = serviceManagementController.getRequestByNumber("REQ-000");

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody().getData());
    }

    @Test
    void testUpdateServiceStatus() throws Exception {
        mockMvc.perform(patch("/api/services/1/service-status")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"statusId\": 2}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data").value("Service updated successfully"));
    }

    @Test
    void testUpdateServiceById() throws Exception {
        ServiceDTO serviceDTO = new ServiceDTO();
        serviceDTO.setEnglishName("Updated Service");
        serviceDTO.setArabicName("خدمة محدثة");

        mockMvc.perform(patch("/api/services/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(serviceDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data").value("Service updated successfully"));
    }

    @Test
    void testGetAllServices() throws Exception {
        Services service = new Services();
        Page<Services> page = new PageImpl<>(List.of(service));

        Mockito.when(serviceManagementService.getAllServices(any(Pageable.class))).thenReturn(page);

        mockMvc.perform(get("/api/services/all?page=0&size=10"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.content").isArray());
    }

    @Test
    void testGetLookups() throws Exception {
        ServiceStatus mockStatus = Mockito.mock(ServiceStatus.class);
        Mockito.when(mockStatus.getStatusEn()).thenReturn("Active");

        Mockito.when(serviceManagementService.getAllServiceStatuses())
                .thenReturn(List.of(mockStatus));
    }

    @Test
    void testGetRequestStatusSummary() throws Exception {
        Mockito.when(requestService.getRequestStatusSummary())
                .thenReturn(List.of(new RequestStatusSummary("Pending","قيد الانتظار", 1L)));


        mockMvc.perform(get("/api/services/requests-summary"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("success"));
    }

    @Test
    void testUpdateRequestStatus() throws Exception {
        StatusUpdateRequest req = new StatusUpdateRequest();
        req.setStatus(Request.Status.valueOf("APPROVED"));
        req.setComment("Looks good");

        mockMvc.perform(patch("/api/services/REQ-123/request-status")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data").value("Request status updated successfully"));
    }

    @Test
    void testUpdateRequestStatus_NotFound() throws Exception {
        Mockito.doThrow(new RuntimeException("REQ-123 not found"))
                .when(requestService)
                .updateRequestStatus(eq("REQ-123"), any(Request.Status.class), anyString());

        StatusUpdateRequest req = new StatusUpdateRequest();
        req.setStatus(Request.Status.REJECTED);
        req.setComment("Invalid");

        mockMvc.perform(patch("/api/services/REQ-123/request-status")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.data").value("Request not found: REQ-123 not found"));
    }


    @Test
    void testGetAllRequests() throws Exception {
        Page<Request> page = new PageImpl<>(List.of(new Request()));
        Mockito.when(requestService.getAllRequests(any())).thenReturn(page);

        mockMvc.perform(get("/api/services/all-requests"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.content").isArray());
    }

    @Test
    void testUpdateRequest() throws Exception {
        UpdateRequestDTO dto = new UpdateRequestDTO();
        dto.setDescription("Updated details");

        mockMvc.perform(patch("/api/services/requests/REQ-321")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(dto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data").value("Request updated successfully"));
    }

    @Test
    void testUpdateRequest_NotFound() throws Exception {
        Mockito.doThrow(new RuntimeException("Request not found"))
                .when(requestService).updateRequest(eq("REQ-321"), any());

        UpdateRequestDTO dto = new UpdateRequestDTO();
        dto.setDescription("Failure test");

        mockMvc.perform(patch("/api/services/requests/REQ-321")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(dto)))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.data").value("Request not found: Request not found"));
    }

    @Test
    void testGetAllTemplates() throws Exception {
        Mockito.when(serviceManagementService.getAllTemplates())
                .thenReturn(List.of(new Template()));

        mockMvc.perform(get("/api/services/templates"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data").isArray());
    }

    @Test
    void testGetAllSubs() throws Exception {
        Page<TemplateFieldValue> page = new PageImpl<>(List.of(new TemplateFieldValue()));
        Mockito.when(serviceManagementService.getSubmissionsByCustomerNumber(eq("SUB-111"), any(Pageable.class)))
                .thenReturn(page);

        mockMvc.perform(get("/api/services/submissions/SUB-111"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.content").isArray());
    }

    @Test
    void testGetCustomerAllSubs() throws Exception {
        TemplateFieldValue mockValue = new TemplateFieldValue();
        mockValue.setId(1L);
        mockValue.setGroupId(100L);
        mockValue.setValue("Test Value");
        mockValue.setSessionId("session-xyz");
        mockValue.setCustomerNumber("CUST-001");
        mockValue.setField(null);

        Page<TemplateFieldValue> mockPage = new PageImpl<>(List.of(mockValue));

        Mockito.when(serviceManagementService.getSubmissionsByCustomerNumber(eq("CUST-001"), any(Pageable.class)))
                .thenReturn(mockPage);

        mockMvc.perform(get("/api/services/submissions/CUST-001")
                        .param("page", "0")
                        .param("size", "10")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("success"))
                .andExpect(jsonPath("$.data.content[0].id").value(1))
                .andExpect(jsonPath("$.data.content[0].groupId").value(100))
                .andExpect(jsonPath("$.data.content[0].value").value("Test Value"))
                .andExpect(jsonPath("$.data.content[0].sessionId").value("session-xyz"))
                .andExpect(jsonPath("$.data.content[0].customerNumber").value("CUST-001"));
    }
}
